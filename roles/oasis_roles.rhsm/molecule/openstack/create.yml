- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    # borrowing the cloud var from molecule_openstack_ci, so it's easier to
    # switch to using that role after molecule is updated to let us use roles
    # in create/destroy steps.
    molecule_openstack_ci_cloud: default
    ssh_user: cloud-user
    ssh_port: 22

    security_group_name: molecule
    security_group_description: "Security group for testing Molecule"
    security_group_rules:
      - ethertype: IPv4
      - ethertype: IPv6

    keypair_name: molecule_key
    keypair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"
  tasks:
    - include_tasks: run_hash.yml

    - name: Look for the configured cloud to be returned
      os_client_config:
        clouds:
          - "{{ molecule_openstack_ci_cloud }}"
      failed_when: (openstack.clouds | length) != 1

    - name: Set the cloud fact
      set_fact:
        _cloud: "{{ openstack.clouds[0] }}"

    - name: Create security group
      os_security_group:
        name: "{{ hashed_security_group_name }}"
        description: "{{ security_group_description }}"
      register: security_group

    - name: Create security group rules
      os_security_group_rule:
        cloud: "{{ molecule_openstack_ci_cloud }}"
        security_group: "{{ hashed_security_group_name }}"
        protocol: "{{ item.proto | default(omit) }}"
        port_range_min: "{{ item.port | default(omit) }}"
        port_range_max: "{{ item.port | default(omit) }}"
        remote_ip_prefix: "{{ item.cidr | default(omit) }}"
        remote_group: "{{ item.group | default(omit) }}"
        ethertype: "{{ item.ethertype | default(omit) }}"
      with_items: "{{ security_group_rules }}"

    - name: Delete remote keypair
      os_keypair:
        cloud: "{{ molecule_openstack_ci_cloud }}"
        name: "{{ hashed_keypair_name }}"
        state: absent

    - name: Create keypair
      os_keypair:
        cloud: "{{ molecule_openstack_ci_cloud }}"
        name: "{{ hashed_keypair_name }}"
      register: keypair

    - name: Persist the keypair
      copy:
        dest: "{{ keypair_path }}"
        content: "{{ keypair.key.private_key }}"
        mode: 0600
      when: keypair.changed

    - name: Create molecule instance(s)
      os_server:
        cloud: "{{ molecule_openstack_ci_cloud }}"
        name: "{{ item.name }}-{{ run_hash }}"
        image: "{{ item.image | default(_cloud.image) }}"
        flavor: "{{ item.flavor | default(_cloud.nova_flavor) }}"
        security_groups: "{{ hashed_security_group_name }}"
        key_name: "{{ hashed_keypair_name }}"
        delete_fip: true
        meta:
          # The generated inventory will still be using the instance name
          # as defined in molecule.yml. Stash the original name in the instance
          # metadata so we can store that in molecule_instance_config, which
          # is used to generate the inventory.
          inventory_name: "{{ item.name }}"
      register: server
      with_items: "{{ molecule_yml.platforms }}"
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: os_jobs
      until: os_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"

    # Mandatory configuration for Molecule to function.
    - name: Populate instance config dict
      set_fact:
        instance_conf_dict:
          # Pull the original (non-hashed) instance name out of metadata to
          # ensure the molecule-generated inventory matches molecule.yml
          instance: "{{ item.openstack.metadata.inventory_name }}"
          address: "{{ item.openstack.accessIPv4 }}"
          user: "{{ ssh_user }}"
          port: "{{ ssh_port }}"
          identity_file: "{{ keypair_path }}"
      with_items: "{{ os_jobs.results }}"
      register: instance_config_dict
      when: server.changed | bool

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: |
          {{ instance_config_dict.results |
             map(attribute='ansible_facts.instance_conf_dict') | list }}
      when: server.changed | bool

    - name: Dump instance config
      copy:
        content: |
          {{ instance_conf | to_json | from_json |
             molecule_to_yaml | molecule_header }}
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool

    - name: Wait for SSH
      wait_for:
        port: "{{ ssh_port }}"
        host: "{{ item.address }}"
        search_regex: SSH
        delay: 10
      with_items: |
          {{ lookup('file', molecule_instance_config) | molecule_from_yaml }}
