---
- block:
  - name: Create a temporary directory
    tempfile:
      state: directory
      suffix: openshift
    register: tempfile

  - name: pip install 
    pip:
      name: "{{ item }}"
      extra_args: "--no-index --find-links {{pip_path}}" 
    loop:
      - "{{lookup('fileglob', pip_path + '/regex*.whl', wantlist=True) | first}}"
      - docker-image-py

  - name: Check if file exists
    stat:
      path: "/usr/local/sbin/{{item}}"
    loop:
      - oc
      - kubectl
    register: out

  - block:
    - name: "Untar openshift-client into {{ tempfile.path }}"
      unarchive:
        src: "{{openshift_client_file}}"
        dest: "{{ tempfile.path }}"
      
    - name: Copy oc and kubectl to /usr/local/sbin
      copy:
        src: "{{ tempfile.path }}/{{item}}"
        dest: /usr/local/sbin/
        mode: 0755
      loop:
        - oc
        - kubectl
    when: false in out.results | map(attribute='stat.exists')

  - block:
    - name: Untar openshift-install into "{{ tempfile.path }}"
      unarchive:
        src: "{{openshift_installer_file}}"
        dest: "{{ tempfile.path }}"

    - name: Copy installer command to /usr/local/sbin
      copy:
        src: "{{ tempfile.path }}/{{item}}"
        dest: /usr/local/sbin/
        mode: 0755
      loop:
        - openshift-install
    when: not setup_registry

  - name: Copy extracted openshift-install for disconnected setup
    copy:
      src: "{{openshift_extracted_installer}}"
      dest: /usr/local/sbin/
      mode: 0755
    loop:
      - openshift-install          
    when: setup_registry

  - name: Get openshift-install version
    command: /usr/local/sbin/openshift-install version
    register: oc_version

  - block:
      - name: Get openshift release image for disconnected install
        set_fact:
          openshift_release_image: "{{oc_version.stdout_lines[-1].split()[-1]}}"

      - name: Get release image path for disconnected install
        set_fact:
          registry_info: "{{lookup('docker', openshift_release_image)}}"

      - name: Verify registry path is correct for disconnected install
        assert:
          that: "{{registry_info.domain == registry_server}}"
          fail_msg: 'openshift-install is not correct. Check openshift-install version'
          success_msg: 'openshift-install is correct'

      - name: Verify release image is accessible for disconnected install
        command: podman pull "{{openshift_release_image}}" --authfile "{{podman_auth_file}}"
        
      - name: Delete local release image 
        command: podman rmi "{{openshift_release_image}}"
        
    when: setup_registry

  - name: Create Openshift deployment directories
    file:
      path: "{{installation_dir}}"
      state: directory

  - name: Clean up directory
    file:
      state: absent
      path: "{{ installation_dir }}/{{item}}"
    with_items:
      - .openshift_install.log
      - .openshift_install_state.json
      - bootstrap.ign
      - master.ign
      - worker.ign
      - auth/kubeconfig
      - auth/kubeadmin-password

  - name: Generate ssh key
    openssh_keypair:
      path: "{{ssh_key_path}}"

  - name: b64encode the registry username and password
    set_fact:
      ocp_pull_secret: '{"auths":{"{{ registry_server }}": {"auth": "{{ username_password | b64encode }}"}}}'
      cert_file: "{{ lookup('file', remote_registry_cert) }}"
      registry_path: "{{ registry_info.path }}"
    vars:
      username_password: "{{ registry_username + ':' + registry_password }}"        
    when: setup_registry

  - name: Generate install_config file
    template:
      src: install-config.yaml.j2
      dest: "{{ installation_dir }}/install-config.yaml"
    vars:
      crt_var: "{{ cert_file | default(omit) }}"
      ssh_var: "{{ lookup('file', ssh_key_path + '.pub') }}"
      pull_secret: "{{ ocp_pull_secret | to_json }}"
      
  - name: "Make a copy of install-config.yaml to {{ installation_dir }}"
    copy:
      src: "{{ installation_dir }}/install-config.yaml"
      dest: "{{ installation_dir }}/install-config.yaml.bak"
      remote_src: yes
       
  - name: Generate manifests files
    command: openshift-install create manifests --dir="{{installation_dir}}"

  - name: Set mastersSchedulable to false
    lineinfile:
      path: "{{installation_dir}}/manifests/cluster-scheduler-02-config.yml"
      regexp: '^  mastersSchedulable: true'
      line: '  mastersSchedulable: false'

  - name: Create ignition files
    command: openshift-install create ignition-configs --dir="{{ installation_dir }}"

  - name: "Ensure {{rhcos_ignition_dest_path}} exists"
    file:
      path: "{{rhcos_ignition_dest_path}}"
      state: directory  
      owner: root
      group: root
      mode: 0755   

  - name: "Copy ignition files to {{rhcos_ignition_dest_path}}"
    copy:
      src: "{{ installation_dir }}/{{item}}"
      dest: "{{rhcos_ignition_dest_path}}/{{item}}"
      remote_src: yes
    loop:
      - bootstrap.ign
      - master.ign
      - worker.ign

  always:
    - name: Delete temporary directory
      file:
        path: "{{tempfile.path}}"
        state: absent  
