---
- block:
  - name: Create a temporary directory
    tempfile:
      state: directory
      suffix: openshift
    register: tempfile

  - debug:
      var: tempfile.path

  - name: "Untar openshift-client into {{ tempfile.path }}"
    unarchive:
      src: "{{openshift_client_file}}"
      dest: "{{ tempfile.path }}"
    
  - name: Copy oc and kubectl to /usr/local/sbin
    copy:
      src: "{{ tempfile.path }}/{{item}}"
      dest: /usr/local/sbin/
      mode: '0755'
    loop:
      - oc
      - kubectl

  - name: Untar openshift-install into "{{ tempfile.path }}"
    unarchive:
      src: "{{openshift_installer_file}}"
      dest: "{{ tempfile.path }}"

  - name: Copy installer command to /usr/local/sbin
    copy:
      src: "{{ tempfile.path }}/{{item}}"
      dest: /usr/local/sbin/
      mode: '0755'
    loop:
      - openshift-install

  - name: Create Openshift deployment directories
    file:
      path: "{{installation_dir}}"
      state: directory

  - name: Clean up directory
    file:
      state: absent
      path: "{{ installation_dir }}/{{item}}"
    with_items:
      - .openshift_install.log
      - .openshift_install_state.json
      - bootstrap.ign
      - master.ign
      - worker.ign
      - auth/kubeconfig
      - auth/kubeadmin-password

  - name: Generate ssh key
    openssh_keypair:
      path: "{{ssh_key_path}}"

  - name: Check for registry cert existence
    stat:
      path: /etc/pki/ca-trust/source/anchors/domain.crt
    register: cert

  - name: Fetch registry certificate
    fetch:
      src: "{{remote_registry_cert}}"
      dest: /etc/pki/ca-trust/source/anchors/domain.crt
      flat: yes
    delegate_to: "{{groups['mirror'][0]}}"
    when: not cert.stat.exists

  - name: update ca-trust
    command: update-ca-trust
    when: not cert.stat.exists

  - name: Generate install_config file
    template:
      src: install-config.yaml.j2
      dest: "{{ installation_dir }}/install-config.yaml"
    vars:
      crt_var: "{{ lookup('file', '/etc/pki/ca-trust/source/anchors/domain.crt') }}"
      ssh_var: "{{ lookup('file', ssh_key_path + '.pub') }}"
      pull_secret: "{{ (registry_username + ':' + registry_password) | b64encode }}"
       
  - name: Mane a copy of install-config.yaml to /tmp
    copy:
      src: "{{ installation_dir }}/install-config.yaml"
      dest: /tmp
      remote_src: yes

  - name: Generate manifests files
    command: openshift-install create manifests --dir="{{installation_dir}}"

  - name: Set mastersSchedulable to false
    lineinfile:
      path: "{{installation_dir}}/manifests/cluster-scheduler-02-config.yml"
      regexp: '^  mastersSchedulable: true'
      line: '  mastersSchedulable: false'

  - name: Create ignition files
    command: openshift-install create ignition-configs --dir="{{ installation_dir }}"

  always:
    - name: Delete temporary directory
      file:
        path: "{{tempfile.path}}"
        state: absent  
